/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package DashboardMedico;

import ConexionPostgreSQL.ConexionDB;
import Controlador.CorreoUtils;
import Controlador.PacienteController;
import Modelo.MedicamentosModel;
import Vista.InicioDeSesion;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Time;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.List;
import com.itextpdf.layout.element.ListItem;
import com.itextpdf.layout.properties.TextAlignment;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;

/**
 *
 * @author rober
 */
public class ConsultaDiagnosticoReceta extends javax.swing.JFrame {

    public ConsultaDiagnosticoReceta() {
        initComponents();
        this.setLocationRelativeTo(null);
        cargarMedicamentosEnTabla();
        txtCurp.addFocusListener(new FocusAdapter() {
    @Override
    public void focusLost(FocusEvent e) {
        String curp = txtCurp.getText().trim();
        if (!curp.isEmpty()) {
            try (Connection conn = ConexionDB.conectar()) {
                PacienteController controlador = new PacienteController();
                controlador.cargarDatosPaciente(curp, txtFecha, txtHora, txtNombre, txtTelefono, 
                                                txtCorreo, fechaNacimientoChooser, rdbHombre, rdbMujer, conn);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error de conexión: " + ex.getMessage());
            }
        }
    }
});
    
       configurarKeyListenerCurp(); // Configurar el KeyListener del campo CURP
       cargarHistorialPacientes();
       cargarHistorialPacientes();
       configurarCamposNoEditables();
       configurarTextosPredeterminados();
 }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btnCerrarSesion2 = new javax.swing.JButton();
        btnDetallesCitas = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnGyE = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtCurp = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        rdbMujer = new javax.swing.JRadioButton();
        rdbHombre = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        fechaNacimientoChooser = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableHistorialPaciente = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtMedicacionRecomendada = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtMotivoConsulta = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtDiagnostico = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtRecomendaciones = new javax.swing.JTextArea();
        comboTipoConsulta = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        txtAcompanante = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaMedConsulta = new javax.swing.JTable();
        btnUsuarios = new javax.swing.JButton();
        btnCitasAgendadas = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(970, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCerrarSesion2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCerrarSesion2.setText("Cerrar sesion");
        btnCerrarSesion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesion2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnCerrarSesion2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 810, 170, 30));

        btnDetallesCitas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDetallesCitas.setText("Detalles de citas");
        btnDetallesCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesCitasActionPerformed(evt);
            }
        });
        getContentPane().add(btnDetallesCitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 520, 170, 30));

        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 790, -1, 20));

        btnGyE.setText("GENERAR Y ENVIAR");
        btnGyE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGyEActionPerformed(evt);
            }
        });
        getContentPane().add(btnGyE, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 790, -1, 20));

        jButton5.setText("AÑADIR");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 800, -1, -1));

        jPanel6.setBackground(new java.awt.Color(163, 172, 125));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("MEDICAMENTOS");
        jPanel6.add(jLabel16);

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 110, 250, 30));

        jPanel2.setBackground(new java.awt.Color(226, 228, 212));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(226, 228, 212));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("HORA:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 50, -1));
        jPanel3.add(txtHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 80, -1));

        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });
        jPanel3.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 70, -1));

        jLabel8.setText("FECHA:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 50, -1));
        jPanel3.add(txtCurp, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 190, 30));

        jLabel10.setText("CURP:");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 40, -1));
        jPanel3.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 180, 30));

        jLabel11.setText("NOMBRE:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 80, -1));
        jPanel3.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 170, 30));

        jLabel12.setText("TELEFONO:");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 80, -1));
        jPanel3.add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, 170, 30));

        jLabel14.setText("SEXO:");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 40, -1));

        buttonGroup1.add(rdbMujer);
        rdbMujer.setText("Mujer");
        rdbMujer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMujerActionPerformed(evt);
            }
        });
        jPanel3.add(rdbMujer, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, -1, -1));

        buttonGroup1.add(rdbHombre);
        rdbHombre.setSelected(true);
        rdbHombre.setText("Hombre");
        rdbHombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHombreActionPerformed(evt);
            }
        });
        jPanel3.add(rdbHombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 340, -1, -1));

        jLabel15.setText("CORREO:");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 80, -1));
        jPanel3.add(fechaNacimientoChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 390, 140, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel9.setText("FECHA DE NACIMIENTO:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 140, 20));

        jPanel9.setBackground(new java.awt.Color(117, 167, 206));
        jPanel3.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 240, -1));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 300, 430));

        tableHistorialPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CURP", "Fecha de consulta", "Hora", "Tipo de consulta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHistorialPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableHistorialPacienteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableHistorialPaciente);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 270, 160));

        jLabel7.setText("HISTORIAL DEL PACIENTE");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 460, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 300, 670));

        jPanel1.setBackground(new java.awt.Color(208, 229, 227));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(120, 179, 205));

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setText("MEDICACION RECOMENDADA");
        jPanel5.add(jLabel20);

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 290, 30));

        jPanel4.setBackground(new java.awt.Color(120, 179, 205));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("MOTIVO DE LA CONSULTA");
        jPanel4.add(jLabel19);

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 290, 30));

        txtMedicacionRecomendada.setColumns(20);
        txtMedicacionRecomendada.setRows(5);
        jScrollPane3.setViewportView(txtMedicacionRecomendada);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 290, 70));

        txtMotivoConsulta.setColumns(20);
        txtMotivoConsulta.setRows(5);
        jScrollPane4.setViewportView(txtMotivoConsulta);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 290, 90));

        txtDiagnostico.setColumns(20);
        txtDiagnostico.setRows(5);
        jScrollPane5.setViewportView(txtDiagnostico);

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 290, 80));

        txtRecomendaciones.setColumns(20);
        txtRecomendaciones.setRows(5);
        jScrollPane6.setViewportView(txtRecomendaciones);

        jPanel1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 290, 80));

        comboTipoConsulta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PRIMERA CONSULTA", "SEGUIMIENTO" }));
        jPanel1.add(comboTipoConsulta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, -1));

        jLabel17.setText("ACOMPAÑANTE:");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, -1, -1));
        jPanel1.add(txtAcompanante, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 130, -1));

        jLabel18.setText("TIPO DE CONSULTA:");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jPanel7.setBackground(new java.awt.Color(120, 179, 205));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setText("DIAGNOSTICO");
        jPanel7.add(jLabel21);

        jPanel1.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 290, 30));

        jPanel8.setBackground(new java.awt.Color(120, 179, 205));

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setText("RECOMENDACIONES");
        jPanel8.add(jLabel22);

        jPanel1.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 290, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 110, 330, 670));

        TablaMedConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Presentacion", "Tipo de venta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaMedConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMedConsultaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaMedConsulta);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 140, 250, 650));

        btnUsuarios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnUsuarios.setText("Consulta");
        getContentPane().add(btnUsuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, 170, 30));

        btnCitasAgendadas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCitasAgendadas.setText("Citas agendadas");
        btnCitasAgendadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitasAgendadasActionPerformed(evt);
            }
        });
        getContentPane().add(btnCitasAgendadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, 170, 30));

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        jLabel5.setText("CONSULTA");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Cuenta");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 255));
        jLabel3.setText("MEDICAL CENTER");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 255));
        jLabel2.setText("VITALIS");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/DashboardMedicamentos.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TablaMedConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMedConsultaMouseClicked

    }//GEN-LAST:event_TablaMedConsultaMouseClicked

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed

    private void rdbHombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbHombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbHombreActionPerformed

    private void rdbMujerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMujerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbMujerActionPerformed

    private void tableHistorialPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHistorialPacienteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableHistorialPacienteMouseClicked

    private void btnGyEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGyEActionPerformed

    String destino = "reporte_consulta.pdf"; // Ruta donde se guarda el PDF

    // Datos del paciente y la consulta
    String correo = txtCorreo.getText().trim(); // Correo desde la caja de texto
    String nombrePaciente = txtNombre.getText();
    String curp = txtCurp.getText();
    String fechaNacimiento = new SimpleDateFormat("dd/MM/yyyy").format(fechaNacimientoChooser.getDate());
    String fechaConsulta = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
    String motivoConsulta = txtMotivoConsulta.getText();
    String diagnostico = txtDiagnostico.getText();
    String recomendaciones = txtRecomendaciones.getText();
    String medicacion = txtMedicacionRecomendada.getText();

    if (correo.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, ingresa un correo electrónico válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Generar el PDF
        PdfWriter writer = new PdfWriter(destino);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        // Encabezado
        document.add(new Paragraph("VITALIS MEDICAL CENTER")
                .setTextAlignment(TextAlignment.CENTER)
                .setBold()
                .setFontSize(20));

        document.add(new Paragraph("Reporte de Consulta Médica")
                .setTextAlignment(TextAlignment.CENTER)
                .setFontSize(14)
                .setMarginBottom(20));

        // Fecha de emisión
        document.add(new Paragraph("Fecha de Consulta: " + fechaConsulta)
                .setTextAlignment(TextAlignment.RIGHT));

        // Datos del paciente
        document.add(new Paragraph("Nombre: " + nombrePaciente));
        document.add(new Paragraph("CURP: " + curp));
        document.add(new Paragraph("Fecha de Nacimiento: " + fechaNacimiento));

        // Contenido de la consulta
        document.add(new Paragraph("Motivo de la Consulta:").setBold());
        document.add(new Paragraph(motivoConsulta));

        document.add(new Paragraph("Diagnóstico:").setBold());
        document.add(new Paragraph(diagnostico));

        document.add(new Paragraph("Recomendaciones:").setBold());
        document.add(new Paragraph(recomendaciones));

        document.add(new Paragraph("Medicación Recomendada:").setBold());
        List listaMedicacion = new List();
        for (String med : medicacion.split("\n")) {
            listaMedicacion.add(new ListItem(med));
        }
        document.add(listaMedicacion);

        // Cierre
        document.add(new Paragraph("\nGracias por confiar en Vitalis Medical Center.\n\nAtentamente,\nEl equipo médico")
                .setTextAlignment(TextAlignment.RIGHT));

        document.close();

        // Enviar el correo con el PDF adjunto
        String asunto = "Reporte de Consulta Médica - Vitalis Medical Center";
        String contenidoCorreo = "Estimado paciente,\n\nAdjunto encontrará su reporte médico con detalles de la consulta.\n\nAtentamente,\nVitalis Medical Center";

        boolean enviado = CorreoUtils.enviarCorreoConAdjunto(correo, asunto, contenidoCorreo, new File(destino));

        if (enviado) {
            JOptionPane.showMessageDialog(this, "PDF generado y enviado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Error al enviar el correo.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al generar o enviar el PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnGyEActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

    try (Connection conn = ConexionDB.conectar()) {
        // Obtener los datos de los campos
        String curp = txtCurp.getText().trim();
        String motivoConsulta = txtMotivoConsulta.getText().trim();
        String diagnostico = txtDiagnostico.getText().trim();
        String recomendaciones = txtRecomendaciones.getText().trim();
        String medicacion = txtMedicacionRecomendada.getText().trim();
        String tipoConsulta = (String) comboTipoConsulta.getSelectedItem();
        String acompanante = txtAcompanante.getText().trim();
        
        // Validar que los campos no estén vacíos
        if (curp.isEmpty() || motivoConsulta.isEmpty() || diagnostico.isEmpty() ||
            recomendaciones.isEmpty() || medicacion.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, completa todos los campos obligatorios.", "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validar CURP (18 caracteres)
        if (curp.length() != 18) {
            JOptionPane.showMessageDialog(null, "La CURP debe tener exactamente 18 caracteres.", "CURP Inválida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Preparar la consulta SQL
        String query = "INSERT INTO Consultas (curp_paciente, fecha, hora, motivo_consulta, diagnostico, recomendaciones, "
                     + "medicacion_recomendada, tipo_consulta, acompanante) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            // Asignar los valores a los parámetros de la consulta
            pstmt.setString(1, curp);
            pstmt.setDate(2, new java.sql.Date(new java.util.Date().getTime())); // Fecha actual
            pstmt.setTime(3, new java.sql.Time(new java.util.Date().getTime())); // Hora actual
            pstmt.setString(4, motivoConsulta);
            pstmt.setString(5, diagnostico);
            pstmt.setString(6, recomendaciones);
            pstmt.setString(7, medicacion);
            pstmt.setString(8, tipoConsulta);
            pstmt.setString(9, acompanante.isEmpty() ? null : acompanante); // Puede ser NULL

            // Ejecutar la consulta
            int filasInsertadas = pstmt.executeUpdate();

            if (filasInsertadas > 0) {
                JOptionPane.showMessageDialog(null, "Consulta guardada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo guardar la consulta.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error al guardar la consulta: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
 // Verificar si hay una fila seleccionada
    int selectedRow = TablaMedConsulta.getSelectedRow();
    if (selectedRow != -1) { // Si hay una fila seleccionada
        // Obtener los datos de las columnas de la fila seleccionada
        String nombre = (String) TablaMedConsulta.getValueAt(selectedRow, 0); // Columna 0: Nombre
        String presentacion = (String) TablaMedConsulta.getValueAt(selectedRow, 1); // Columna 1: Presentación
        String tipoVenta = (String) TablaMedConsulta.getValueAt(selectedRow, 2); // Columna 2: Tipo de Venta

        // Formatear el texto para que se vea bonito
       String medicamentoFormateado = String.format("**************\nMedicamento: %s\nPresentación: %s\nTipo de Venta: %s\n**************",
                                             nombre, presentacion, tipoVenta);


        // Agregar el texto al cuadro de texto (añadir en una nueva línea)
        txtMedicacionRecomendada.append(medicamentoFormateado + "\n");
    } 
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnCitasAgendadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitasAgendadasActionPerformed
        // TODO add your handling code here:
        CitasAgendadas citasAgen = new CitasAgendadas();
        citasAgen.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnCitasAgendadasActionPerformed

    private void btnCerrarSesion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesion2ActionPerformed
        // TODO add your handling code here:
        dispose();
        InicioDeSesion inSes = new InicioDeSesion();
        inSes.setVisible(true);
    }//GEN-LAST:event_btnCerrarSesion2ActionPerformed

    private void btnDetallesCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesCitasActionPerformed
        // TODO add your handling code here:
        DetallesCitas detallCi = new DetallesCitas();
        detallCi.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnDetallesCitasActionPerformed

private void cargarMedicamentosEnTabla() {
    // Obtener el modelo de la tabla
    DefaultTableModel modeloTabla = (DefaultTableModel) TablaMedConsulta.getModel();

    // Limpiar cualquier dato existente en la tabla
    modeloTabla.setRowCount(0);

    // Crear una instancia del controlador o modelo
    MedicamentosModel metodos = new MedicamentosModel();

    // Llamar al método para cargar los datos
    try {
        metodos.cargarMedicamentosEnTabla(modeloTabla);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar los medicamentos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void cargarHistorialPacientes() {
    DefaultTableModel modelo = (DefaultTableModel) tableHistorialPaciente.getModel();
    modelo.setRowCount(0); // Limpiar la tabla antes de cargar datos

    String query = "SELECT curp_paciente, fecha, hora, tipo_consulta FROM Consultas";

    try (Connection conn = ConexionDB.conectar();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {

        while (rs.next()) {
            // Obtener los datos de cada columna
            String curp = rs.getString("curp_paciente");
            Date fecha = rs.getDate("fecha");
            Time hora = rs.getTime("hora");
            String tipoConsulta = rs.getString("tipo_consulta");

            // Añadir la fila al modelo de la tabla
            modelo.addRow(new Object[]{curp, fecha, hora, tipoConsulta});
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error al cargar el historial: " + ex.getMessage());
    }
}


private void configurarCamposNoEditables() {
    txtFecha.setEditable(false);     // Campo Fecha
    txtHora.setEditable(false);      // Campo Hora
    txtNombre.setEditable(false);    // Campo Nombre
    txtTelefono.setEditable(false);  // Campo Teléfono
    txtCorreo.setEditable(false);    // Campo Correo
    
    // Deshabilitar edición en JDateChooser (Fecha de Nacimiento)
    fechaNacimientoChooser.getDateEditor().setEnabled(false);
    fechaNacimientoChooser.setEnabled(false);

    // Opcional: Deshabilitar los RadioButtons de sexo
    rdbHombre.setEnabled(false);
    rdbMujer.setEnabled(false);
}


private void configurarTextosPredeterminados() {
    // Texto predeterminado para Motivo de la consulta
    txtMotivoConsulta.setText("El paciente [Nombre completo del paciente]\n"+"asiste a consulta por [Motivo principal].");

    // Texto predeterminado para Diagnóstico
    txtDiagnostico.setText("El diagnóstico obtenido es:\n" + "[Descripción del diagnóstico].");

    // Texto predeterminado para Recomendaciones
    txtRecomendaciones.setText("Se le recomienda al paciente:\n" + "[Recomendaciones específicas para el paciente].");
}


// Método para limpiar los campos después de guardar
private void limpiarCampos() {
    txtCurp.setText("");
    txtMotivoConsulta.setText("");
    txtDiagnostico.setText("");
    txtRecomendaciones.setText("");
    txtMedicacionRecomendada.setText("");
    txtAcompanante.setText("");
    comboTipoConsulta.setSelectedIndex(0); // Reiniciar el ComboBox al primer valor

    // Deshabilitar automáticamente los campos no editables
    txtFecha.setText("");
    txtHora.setText("");
    txtNombre.setText("");
    txtTelefono.setText("");
    txtCorreo.setText("");
    fechaNacimientoChooser.setDate(null);
    rdbHombre.setSelected(false);
    rdbMujer.setSelected(false);
}
    
private void filtrarHistorialPorCurp(String curp) {
    DefaultTableModel modelo = (DefaultTableModel) tableHistorialPaciente.getModel();
    modelo.setRowCount(0); // Limpiar la tabla antes de cargar los datos filtrados

    String query = "SELECT curp_paciente, fecha, hora, tipo_consulta FROM Consultas WHERE curp_paciente = ?";

    try (Connection conn = ConexionDB.conectar();
         PreparedStatement pstmt = conn.prepareStatement(query)) {

        pstmt.setString(1, curp);
        try (ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                // Obtener los datos filtrados
                String curpPaciente = rs.getString("curp_paciente");
                Date fecha = rs.getDate("fecha");
                Time hora = rs.getTime("hora");
                String tipoConsulta = rs.getString("tipo_consulta");

                // Añadir los datos a la tabla
                modelo.addRow(new Object[]{curpPaciente, fecha, hora, tipoConsulta});
            }

            if (modelo.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No se encontraron registros para la CURP ingresada.");
            }
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error al filtrar el historial: " + ex.getMessage());
    }
}

private void cargarDatosPaciente(String curp) {
    try (Connection conn = ConexionDB.conectar()) {
        // Instancia del controlador
        PacienteController controlador = new PacienteController();
        controlador.cargarDatosPaciente(curp, txtFecha, txtHora, txtNombre, txtTelefono, 
                                        txtCorreo, fechaNacimientoChooser, rdbHombre, rdbMujer, conn);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error al cargar datos del paciente: " + ex.getMessage());
    }
}


private void configurarKeyListenerCurp() {
    txtCurp.addKeyListener(new KeyAdapter() {
        @Override
        public void keyReleased(KeyEvent e) {
            String curp = txtCurp.getText().trim();

            if (curp.length() == 18) { // Validar que la CURP tenga 18 caracteres
                cargarDatosPaciente(curp); // Método para cargar datos del paciente
                filtrarHistorialPorCurp(curp); // Método para filtrar el historial
            } else if (curp.isEmpty()) {
                cargarHistorialPacientes(); // Mostrar todos los registros si CURP está vacío
                limpiarCampos();    // Limpiar campos si CURP está incompleta
            }
        }
    });
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaDiagnosticoReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaDiagnosticoReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaDiagnosticoReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaDiagnosticoReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultaDiagnosticoReceta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaMedConsulta;
    private javax.swing.JButton btnCerrarSesion;
    private javax.swing.JButton btnCerrarSesion2;
    private javax.swing.JButton btnCitasAgendadas;
    private javax.swing.JButton btnDetallesCitas;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGyE;
    private javax.swing.JButton btnUsuarios;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboTipoConsulta;
    private com.toedter.calendar.JDateChooser fechaNacimientoChooser;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JRadioButton rdbHombre;
    private javax.swing.JRadioButton rdbMujer;
    private javax.swing.JTable tableHistorialPaciente;
    private javax.swing.JTextField txtAcompanante;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtCurp;
    private javax.swing.JTextArea txtDiagnostico;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextArea txtMedicacionRecomendada;
    private javax.swing.JTextArea txtMotivoConsulta;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextArea txtRecomendaciones;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
